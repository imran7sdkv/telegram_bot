from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update

from telegram.ext import (
    CallbackContext,
    Updater,
    PicklePersistence,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler
)
from cred import TOKEN
from key_buttons import tele_button, button, exit_exit
from menu import main_menu_keyboard, course_menu_keyboard


def record(update: Update, context: CallbackContext):
    text = update.message.text
    if text[:6] == '–ó–∞–ø–∏—Å—å':
        print(text)
        context.bot.send_message(
            chat_id='-855309837',
            text=text
        )


def on_click(update: Update, context: CallbackContext):
    update.message.reply_text(
        text="""
1. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø–∏—Å—å: " –∏ –≤–∞—à–µ –§–ò–û.
2. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
3. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è.
        """
    )

def start(update: Update, context: CallbackContext):
    
    context.bot.sendSticker(
        update.effective_chat.id,
        sticker ='CAACAgIAAxkBAAEGbWVjc3mX9VFPqHxc3HfaT5SBuF0_MwACDAADOTXQHmQDRlD5SWaEKwQ'
    )
    update.message.reply_text(
        f"–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å {update.effective_user.username}",
        reply_markup=main_menu_keyboard()
    )

ABOUT = tele_button[0]
COURSE_MENU = tele_button[1]
BACK = exit_exit[0]
PYTHON = button[0]
JS = button[1]
UXUI = button[2]
LOC = tele_button[2]
RECORD = button[3]

def resive_course_menu(update: Update, context: CallbackContext):
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å',
        reply_markup=course_menu_keyboard()
    )

def about(update: Update, context: CallbackContext):
    update.message.reply_text(
        '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –ª—é–¥–∏ –ª—é–±–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ñ–µ—Ä–µ IT. –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è OGOGO –∞–∫–∞–¥–µ–º–∏–∏ —ç—Ç–æ –¥–∞—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å —ç–º–æ—Ü–∏—è–º–∏, —Ä–∞–∑–≤–∏–≤–∞—è –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, –Ω–æ –∏ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –¶–µ–ª—å—é –∫–æ–º–ø–∞–Ω–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∑—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã—Ö IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –º–∏—Ä–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.',
        reply_markup=main_menu_keyboard()
    )

def back(update: Update, context: CallbackContext):
    update.message.reply_text(
        '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
        reply_markup=main_menu_keyboard()
    )

def location(update: Update, context: CallbackContext):
    msg = context.bot.send_message(
            update.effective_chat.id,
            text = 'Location of OGOGO'
        )
    update.message.reply_location(
        #42.873605195923126, 74.6199937538582
        longitude=74.6199937538582,
        latitude=42.873605195923126,
        reply_to_message_id=msg.message_id
    )

def python_inline_menu(update: Update, context: CallbackContext):
    keyboard = [
    
    [InlineKeyboardButton('Mentor', callback_data='python_mentor'),],
    [InlineKeyboardButton('Lesson', callback_data='python_lesson'),],
    [InlineKeyboardButton('Price', callback_data='python_price')]
    ]
    reply_murkup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=reply_murkup
    )

def js_inline_menu(update: Update, context: CallbackContext):
    keyboard = [
    
    [InlineKeyboardButton('Mentor', callback_data='js_mentor'),],
    [InlineKeyboardButton('Lesson', callback_data='js_lesson'),],
    [InlineKeyboardButton('Price', callback_data='js_price')]
    ]
    reply_murkup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=reply_murkup
    )    

def uxui_inline_menu(update: Update, context: CallbackContext):
    keyboard = [
    
    [InlineKeyboardButton('Mentor', callback_data='ux/ui_mentor'),],
    [InlineKeyboardButton('Lesson', callback_data='ux/ui_lesson'),],
    [InlineKeyboardButton('Price', callback_data='ux/ui_price')]
    ]
    reply_murkup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=reply_murkup
    )

def button(update: Update, context: CallbackContext):
    keyboard = [
    
    [InlineKeyboardButton('Mentor', callback_data='python_mentor'),],
    [InlineKeyboardButton('Lesson', callback_data='python_lesson'),],
    [InlineKeyboardButton('Price', callback_data='python_price')]
    ]
    reply_murkup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    if query.data == 'python_mentor':
        context.bot.sendPhoto(
            update.effective_chat.id,
            photo = open('img/ilias.jpeg.jpg', 'rb'),
            caption = """
name: Ilias
age: 16
expierence: 6 years
work place: Google, Microsoft, Facebook, Oazis
            """,
            reply_markup=reply_murkup
        )

    if query.data == 'python_price':
        context.bot.send_message(
            update.effective_chat.id,
            text = '–æ–ø–ª–∞—Ç–∞: 16,000 —Å–æ–º –≤ –º–µ—Å—è—Ü.' 
        )
        
    if query.data == 'python_lesson':
        context.bot.send_message(
            update.effective_chat.id,
            text = '–£—Ä–æ–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –¥–ª–∏—Ç—Å—è –∫–∞–∂–¥—ã–π —É—Ä–æ–∫ –ø–æ—Ä—è–¥–∫–∞ —Ç—Ä—ë—Ö —á–∞—Å–æ–≤, —Ç–∞–∫–∂–µ –º—ã –∏–º–µ–µ–º –ø–µ—Ä–µ—Ä—ã–≤.' 
        )

    query = update.callback_query
    keyboard = [
    
    [InlineKeyboardButton('Mentor', callback_data='js_mentor'),],
    [InlineKeyboardButton('Lesson', callback_data='js_lesson'),],
    [InlineKeyboardButton('Price', callback_data='js_price')]
    ]
    reply_murkup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query

    if query.data == 'js_mentor':
        context.bot.sendPhoto(
            update.effective_chat.id,
            photo = open('img/js.webp', 'rb'),
            caption = """
name: Ishak
age: 28
expierence: 4 years
work place: Google, Microsoft, Facebook
            """,
            reply_markup=reply_murkup
        )
    if query.data == 'js_price':
        context.bot.send_message(
            update.effective_chat.id,
            text = '–æ–ø–ª–∞—Ç–∞: 16,000 —Å–æ–º –≤ –º–µ—Å—è—Ü.' 
        )
        
    if query.data == 'js_lesson':
        context.bot.send_message(
            update.effective_chat.id,
            text = '–£—Ä–æ–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –¥–ª–∏—Ç—Å—è –∫–∞–∂–¥—ã–π —É—Ä–æ–∫ –ø–æ—Ä—è–¥–∫–∞ —Ç—Ä—ë—Ö —á–∞—Å–æ–≤, —Ç–∞–∫–∂–µ –º—ã –∏–º–µ–µ–º –ø–µ—Ä–µ—Ä—ã–≤.' 
        )


    query = update.callback_query
    keyboard = [
    
    [InlineKeyboardButton('Mentor', callback_data='ux/ui_mentor'),],
    [InlineKeyboardButton('Lesson', callback_data='ux/ui_lesson'),],
    [InlineKeyboardButton('Price', callback_data='ux/ui_price')]
    ]
    reply_murkup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    
    if query.data == 'ux/ui_mentor':
        context.bot.sendPhoto(
            update.effective_chat.id,
            photo = open('img/ux_ui.jpg', 'rb'),
            caption = """
name: Ildar
age: 23
expierence: 5 years
work place: Google, Apple
            """,
            reply_markup=reply_murkup
        )
    if query.data == 'ux/ui_price':
        context.bot.send_message(
            update.effective_chat.id,
            text = '–æ–ø–ª–∞—Ç–∞: 16,000 —Å–æ–º –≤ –º–µ—Å—è—Ü.' 
        )
        
    if query.data == 'ux/ui_lesson':
        context.bot.send_message(
            update.effective_chat.id,
            text = 'üòä–£—Ä–æ–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –¥–ª–∏—Ç—Å—è –∫–∞–∂–¥—ã–π —É—Ä–æ–∫ –ø–æ—Ä—è–¥–∫–∞ —Ç—Ä—ë—Ö —á–∞—Å–æ–≤, —Ç–∞–∫–∂–µ –º—ã –∏–º–µ–µ–º –ø–µ—Ä–µ—Ä—ã–≤.' 
        )


updater = Updater(TOKEN, persistence=PicklePersistence(filename='bot_data'))
updater.dispatcher.add_handler(CommandHandler('start', start))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(COURSE_MENU),
    resive_course_menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(ABOUT),
    about
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(BACK),
    back
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(PYTHON),
    python_inline_menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(JS),
    js_inline_menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(UXUI),
    uxui_inline_menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(LOC),
    location
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(RECORD),
    on_click
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.text,
    record
))


updater.dispatcher.add_handler(CallbackQueryHandler(button))
updater.start_polling()
updater.idle()